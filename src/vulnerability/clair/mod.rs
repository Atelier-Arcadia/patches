mod api;

use std::fmt;

use reqwest::{Error as RequestError, Url};

use vulnerability::{Source, Vulnerability};


/// A vulnerability source that draws information from the Clair API.
pub struct Clair {
  base_address: Url,
  target_platform: Platform,
}

/// Represents each of the "namespaces" that we can query Clair for.
pub enum Platform {
  Debian(u8),
  Alpine3(u8),
  Ubuntu(u8, u8),
  // TODO add the rest
}

impl Clair {
  /// Construct a new `Clair` client with a base URL pointing to the API.
  pub fn new(base_addr: Url, target: Platform) -> Self {
    Clair {
      base_address: base_addr,
      target_platform: target,
    }
  }
}

impl fmt::Display for Platform {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match *self {
      Platform::Debian(ver)          => write!(f, "debian:{}", ver),
      Platform::Alpine3(ver)         => write!(f, "alpine:v3.{}", ver),
      Platform::Ubuntu(major, minor) => write!(f, "ubuntu:{}.{}", major, minor),
    }
  }
}

impl Source for Clair {
  type Error = RequestError;

  fn query(&mut self) -> Result<Vec<Vulnerability>, Self::Error> {
    Ok(vec![])
  }
}
