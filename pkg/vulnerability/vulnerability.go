package vulnerability

import (
	"encoding/json"

	"github.com/zsck/patches/pkg/done"
	"github.com/zsck/patches/pkg/pack"
)

// Source describes types that can serve a stream of information about
// vulnerabilities affecting software packages.
type Source interface {
	Vulnerabilities() (<-chan Vulnerability, <-chan done.Done, error)
}

// Vulnerability describes a vulnerability affecting a package
type Vulnerability struct {
	Name                 string         `json:"name"`
	AffectedPackageName  string         `json:"affectedPackedName"`
	AffectedPlatformName string         `json:"affectedPlatform"`
	DetailsHref          string         `json:"detailsHref"`
	SeverityRating       Severity       `json:"severityRating"`
	FixedInPackages      []pack.Package `json:"fixedInPackages"`
}

// Severity enumerates the levels of severity that a vulnerability can be
// rated with.
type Severity uint8

const (
	SeverityUnknown    Severity = iota
	SeverityNegligible Severity = iota
	SeverityLow        Severity = iota
	SeverityMedium     Severity = iota
	SeverityHigh       Severity = iota
	SeverityCritical   Severity = iota
	SeverityUrgent     Severity = iota
)

// Equals determines whether two vulnerabilities contain the same data.
func (vuln Vulnerability) Equals(other Vulnerability) bool {
	if len(vuln.FixedInPackages) != len(other.FixedInPackages) {
		return false
	}
	for _, p1 := range vuln.FixedInPackages {
		found := false
		for _, p2 := range other.FixedInPackages {
			if p1 == p2 {
				found = true
				break
			}
		}
		if !found {
			return false
		}
	}

	return vuln.Name == other.Name &&
		vuln.AffectedPackageName == other.AffectedPackageName &&
		vuln.AffectedPlatformName == other.AffectedPlatformName &&
		vuln.DetailsHref == other.DetailsHref &&
		vuln.SeverityRating == other.SeverityRating
}

// String produces a textual representation of a vulnerability as JSON.
func (vuln Vulnerability) String() string {
	encoded, _ := json.Marshal(vuln)
	return string(encoded)
}
